<!--
scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration debug="true" scan="false" scanPeriod="60 seconds" packagingData="true">
    <!--
    property：用来定义变量值的标签，<property> 有两个属性，name和value。通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。
    例如使用<property>定义上下文名称，然后在<contentName>设置logger上下文时使用。
    -->
    <property name="contextName" value="test" />
    <!-- 定义日志文件 输出位置 -->
    <property name="log_home" value="./log/" />

    <!--
    contextName：每个logger都关联到logger上下文，默认上下文名称为“default”。
    但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。
    -->
    <contextName>${contextName}</contextName>


    <!-- ******************** appender：日志目的地 start ******************** -->

    <!-- 标准输出：console -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!-- encoder 默认配置为PatternLayoutEncoder -->
        <encoder>
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 文件输出：file -->
    <appender name="file"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--每天生成一个日志文件，保存30天的日志文件-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log_home}/logback.log.%d{yyyy-MM-dd}.log</FileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <!-- 日志输出格式：
                    %d表示日期时间
                    %thread表示线程名
                    %-5level：级别从左显示5个字符宽度
                    %logger{50} 表示logger名字最长50个字符，否则按照句点分割。
                    %msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{56}.%method:%L -%msg%n</pattern>
        </layout>
        <!--日志打印按照每天和大小生成日志-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <FileNamePattern>${log_home}/logback.log.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>30</maxHistory>
        </rollingPolicy>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{56}.%method:%L -%msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- ******************** appender：日志目的地 end ******************** -->

    <!-- ******************** logger：精确配置package或class的level、appender,可以配置0个或多个 end ******************** -->
    <!--
    level:日志级别（logger中的level会覆盖root中的，即以logger中为准，不管是否向上传递）
    name:包名 或 类的全路径
    addtivity:日志信息是否向上（root）传递
    -->
    <!--
    <logger name="com.xxx" level="warn" additivity="false">
        <level value="info" />
        <appender-ref ref="console"/>
        <appender-ref ref="file"/>
    </logger>
    -->

    <!-- ******************** logger：精确配置package或class日志的level、appender end ******************** -->



    <!-- ******************** root：定义日志的level、appender，且最多只能配置一个 start ******************** -->

    <!--TRACE < DEBUG < INFO <  WARN < ERROR-->
    <root level="info">
        <!-- 定义了INFO及以上级别的日志，分别在文件和控制台输出 -->
        <level value="info" />
        <!--<appender-ref ref="file" />-->
        <appender-ref ref="console" />
    </root>

    <!-- ******************** root：定义日志的level、appender，且最多只能配置一个 end ******************** -->
</configuration>
